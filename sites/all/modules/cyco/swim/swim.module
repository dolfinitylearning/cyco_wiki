<?php
/**
 * @file
 * Server-side SWIM implementation.
 */

require_once drupal_get_path('module', 'swim') . '/SwimCustomTagParser.php';

//Default heights for the editor and summary.
define('SWIM_DEFAULT_HEIGHT', '15');
define('SWIM_DEFAULT_SUMMARY_HEIGHT', '5');
//Class MathJax uses to detect what content it should mess with.
define('SWIM_MATH_JAX_CLASS', 'math');

/**
 * Implements hook_help().
 * @todo Write SWIMmy help in hook_help.
 */
function swim_help($path, $arg) {
  switch ($path) {
    case 'admin/help#swim':
      return '<p>' . t('Helpy helpy help help, <a href="@jquery">jQuery</a>.', 
          array(
            '@jquery' => 'http://jquery.com',
          )) . '</p>';
  }
}

/**
 * Implements hook_menu.
 */
function swim_menu() {
  $items = array();
  $items['admin/config/content/swim'] = array(
    'title' => 'SWIM',
    'description' => 'Configure the Show-What-I-Mean editor.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_swim_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'swim.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Let other modules declare custom tags.
 * 
 * Some tags only work in view mode (e.g., pattern, exercise). In edit mode,
 * they are not translated.
 * 
 * Other tags are translated in both view and edit mode (e.g., pseudent).
 * 
 * @param SwimCustomTagParser $custom_tag_parser Parser the tags will be 
 * added to.
 * @param string $mode Mode the parser is being used for: edit or view.
 */
function swim_declare_custom_tags( $custom_tag_parser, $mode ) {
  if ( get_class($custom_tag_parser) !== 'SwimCustomTagParser') {
    $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
        . ' first param: wrong object type: ' . get_class($custom_tag_parser);
    cyco_core_handle_error( $message );
    return;    
  }
  if ( $mode != 'view' && $mode != 'edit' ) {
    $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
        . ' bad mode: ' . $mode;
    cyco_core_handle_error( $message );
    return;    
  }
  $custom_tag_definitions = module_invoke_all('swim_custom_tag_' . $mode . '_info');
  if ( sizeof( $custom_tag_definitions ) == 0 ) {
    //Nothing declared.
    return;
  }
  if ( !isset($custom_tag_definitions['tag']) 
      || !isset($custom_tag_definitions['callback']) ) {
    $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
        . ' bad tag definition';
    cyco_core_handle_error( $message );
    return;
  }
  //Maybe only one tag declared.
  if ( !is_array($custom_tag_definitions['tag']) ) {
    $custom_tag_parser->declareCustomTag(
      $custom_tag_definitions['tag'],
      $custom_tag_definitions['callback']
    );
  }
  else {
    //More than one tag declared.
    foreach ($custom_tag_definitions['tag'] as $index => $tag) {
      $callback = $custom_tag_definitions['callback'][$index];
      $custom_tag_parser->declareCustomTag($tag, $callback);
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function swim_permission() {
  return array(
    'peek content' => array(
      'title' => t('Peek at rendered content'),
      'description' => t('When editing, see what the content looks like on various devices.')
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function swim_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'swim.services.inc', // File to load.
      'path' => drupal_get_path('module', 'swim') . '/includes', // If specifying the file key, path is required.
    );
  }
}

/**
 * Implement hook_field_widget_info().
 * 
 * Define two new widgets. Both have 'editor' in its name.
 */
function swim_field_widget_info() {
  $info = array(
    'swim_widget' => array(
      'label' => t('SWIM editor'),
      'description' => t(
          'SWIM anti-WYSIWYG editor.'),
      'field types' => array('swim_field'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'swim_with_summary_widget' => array(
      'label' => t('SWIM editor with summary'),
      'description' => t(
          'SWIM anti-WYSIWYG editor with summary.'),
      'field types' => array('swim_with_summary_field'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
  return $info;
}
    
function swim_field_widget_form(
    &$form, &$form_state, $field, $instance, 
    $langcode, $items, $delta, $element) {
  $base = $element;
  if (
         $instance['widget']['type'] == 'swim_widget' 
      || $instance['widget']['type'] == 'swim_with_summary_widget') {
    $with_summary = ( $instance['widget']['type'] == 'swim_with_summary_widget' );
    _swim_add_client_pieces();
    //Prep content for widget.
    $value = '';
    if ( isset( $items[$delta]['value'] ) ) {
      $value = _swim_prep_widget_content($items[$delta]['value']);
    }
    $element['value'] = array(
      '#type' => 'textarea',
      '#title' => t( $element['#title'] ),
      //Remove grippie.
      '#resizable' => FALSE,
      '#default_value' => $value ? swim_textile2ckhtml( $value ) : '',
//      '#default_value' => $value ? swim_rest2ckhtml( $value ) : '',
      '#attributes' => array(
        'class' => array('swim-editor swim-editor-main text-full'),
      ),
      '#value_callback' => '_swim_field_widget_value',
    ) + $base;
    if ( $with_summary ) {
      //Prep content for widget.
      $summary = '';
      if ( isset( $items[$delta]['summary'] ) ) {
        $summary = _swim_prep_widget_content($items[$delta]['summary']);
      }
      $element['summary'] = array(
        '#type' => 'textarea',
        '#title' => t('Summary'),
        '#description' => t('Leave blank to use trimmed value of full text as the summary.'),
        //Remove grippie.
        '#resizable' => FALSE,
        '#default_value' => $summary ? swim_textile2ckhtml( $summary ) : '',
//        '#default_value' => $summary ? swim_rest2ckhtml( $summary ) : '',
        '#attributes' => array(
          'class' => array('swim-editor swim-editor-summary'),
        ),
        '#prefix' => '<div class="swim-summary-wrapper">',
        '#suffix' => '</div>',
        '#weight' => -10,
        '#attached' => array(
          'js' => array(drupal_get_path('module', 'swim') 
                  . '/js/swim_summary_links.js'),
        ),
        '#value_callback' => '_swim_field_widget_value',
      ) + $base;
    } //End with_summary
  }
  return $element;
}


function _swim_prep_widget_content( $content ) {
  //Strip \r from content.
  $content = str_replace("\r", '', $content);
  return $content;
}

function swim_field_is_empty($item, $field) {
  if ($field['type'] == 'swim_field') {
    $mt = ! $item['value'];
    return $mt;
  }
  if ($field['type'] == 'swim_with_summary_field') {
    $mt = (!$item['value'] ) && (!$item['summary'] );
    return $mt;
  }
  return FALSE;
}

/**
 * Called after returning from edit form. Strip out the CK stuff, and
 * just get some ReST.
 * @param type $element
 * @param type $input Da goods from CK.
 * @param type $form_state
 * @return string Da ReST goods.
 */
function _swim_field_widget_value($element, $input = FALSE, $form_state = array()) {
  if ( $input !== FALSE ) {
    $result = swim_ckhtml2textile($input);
//    $result = _swim_ckhtml2rest($input);
    return $result;
  }
}


/**
 * Implements hook_libraries_info().
 */
function swim_libraries_info() {
  $libraries = array();
  $libraries['ckeditor'] = array(
    'name' => 'CKEditor',
    'vendor url' => 'http://ckeditor.com/',
    'download url' => 'http://download.cksource.com/CKEditor/CKEditor/CKEditor%204.3.2/ckeditor_4.3.2_standard.zip',
    'version arguments' => array(
      'file' => 'ckeditor.js',
      // version:"4.4"
      'pattern' => '/version\:\"(\d+\.+\d+)\"/',
//      // version:"4.4"
      'lines' => 10,
    ),
    'files' => array(
      'js' => array(
        'ckeditor.js',
      ),
    ),
  );
  $libraries['php-textile'] = array(
    'name' => 'PHP-Textile',
    'vendor url' => 'https://github.com/textile/php-textile',
    'download url' => 'https://github.com/textile/php-textile',
    'path' => 'src/Netcarver/Textile/',
    'version arguments' => array(
      'file' => 'src/Netcarver/Textile/Parser.php',
      // Sample: $ver = '3.5.5';
      'pattern' => '/\$ver\s=\s\'(.*)?\'\;/',
      'lines' => 500,
    ),
    'files' => array(
      'php' => array(
        'Parser.php',
        'DataBag.php',
        'Tag.php',
      ),
    ),
  );
//  $libraries['mathjax'] = array(
//    'name' => 'MathJax',
//    'vendor url' => 'https://github.com/mathjax/MathJax/',
//    'download url' => 'https://github.com/mathjax/MathJax/',
//    'version arguments' => array(
//      'file' => 'MathJax.js',
//      // Sample: MathJax.version="2.4.0";
//      'pattern' => '/version\=\"([\d\.]*)\"/',
//    ),
//    'files' => array(
//      'js' => array(
//        'MathJax.js',
//      ),
//    ),
//  );
  return $libraries;
}

/**
 * Add stuff the browser will need.
 * @param boolean $add_plugins If false, don' add no steekin' plugins, gringo.
 */
function _swim_add_client_pieces( $add_plugins = TRUE ) {
  //Only run this once per page.
  static $already_added = FALSE;
  if ( $already_added ) {
    return;
  }
  $already_added = TRUE;
  global $base_url;
  //Set up UI stuff.
  drupal_add_library('system', 'ui.dialog');
  //Load CKEditor.
  $ck_library_info = libraries_load('ckeditor');
  $num_files_loaded = libraries_load_files($ck_library_info);
  if ( $num_files_loaded <= 0 ) {
    $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
        . 'SWIM error: no CKEditor files loaded. Is CK installed?';
    cyco_core_handle_error( $message );
    return;
  }
//  //Load MathJax.
//  $mj_library_info = libraries_load('mathjax');
//  $num_files_loaded = libraries_load_files($mj_library_info);
//  if ( $num_files_loaded <= 0 ) {
//    $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
//        . 'SWIM error: no MathJax files loaded. Is it installed?';
//    cyco_core_handle_error( $message );
//    return;
//  }
  //Add CSS.
  drupal_add_css( drupal_get_path('module', 'swim') . '/css/swim.css' );
  //Add services library.
  _swim_add_client_services_lib();
  //Obscurer code.
  $obscurer = theme('obscurer');
  //Send settings to JS.
  $settings = array(
    'base_url' => $base_url,
    'editing_stylesheet' => 
      $base_url . '/' . drupal_get_path('module', 'swim') . '/css/swim_editing.css',
    //The height are in lines.
    'editor_height' => variable_get('swim_default_height', SWIM_DEFAULT_HEIGHT),
    'editor_summary_height' => variable_get('swim_default_summary_height', 
        SWIM_DEFAULT_SUMMARY_HEIGHT),
    'obscurer' => $obscurer,
  );
  if ( $add_plugins ) {
    //Build a list of extra plugins to load.
    //Array of arrays of form name=>?, path=>?.
    $plugins = module_invoke_all('swim_load_ck_plugins');
    //The array is flat if there is only one plugin. Unflatten it, if needed.
    $plugins = _swim_unflatten( $plugins );
    //Add peek CK plugin.
    $plugins['name'][] = 'peek';
    $plugins['path'][] = $base_url . '/' . drupal_get_path('module', 'swim') 
          . '/ck_plugins/peek/';
    //Add modified MathJax CK plugin.
    $plugins['name'][] = 'mathjax';
    $plugins['path'][] = $base_url . '/' . drupal_get_path('module', 'swim') 
          . '/ck_plugins/mathjax/';
    //Add help CK plugin, if there is a message to show.
    $help_message = variable_get('swim_help_message_rendered', FALSE);
    if ( $help_message ) {
      $plugins['name'][] = 'swim_help';
      $plugins['path'][] = $base_url . '/' . drupal_get_path('module', 'swim') 
            . '/ck_plugins/swim_help/';
    }
    //Make sure the last char in each path is /.
    foreach ($plugins['path'] as $key => $value) {
      if ( substr($value, -1) != '/' ) {
        $plugins['path'][$key] .= '/';
      }
    }
    //Send settings to JS.
    $settings['extraPlugins'] = $plugins;
    $settings['can_peek'] = user_access('peek content') ? 'yes' : 'no';
    $settings['peekIconsPath'] = $base_url . '/' . 
        drupal_get_path('module', 'swim') . '/ck_plugins/peek/icons/';
  } //End adding plugins.
  drupal_add_js(
      array('swim' => $settings),
      'setting'
  );
  //Load SWIM JS.
  drupal_add_js( drupal_get_path('module', 'swim') . '/js/swim_base_config.js' );
  drupal_add_js( drupal_get_path('module', 'swim') . '/js/swim.js' );
  //Let other modules add their own stuff.
  $js_lines = module_invoke_all('swim_add_client_stuff');
  drupal_add_js( implode(' ', $js_lines), 'inline');
}

/**
 * Add client-side library for services.
 */
function _swim_add_client_services_lib() {
  global $base_url;
  $settings = array(
    'baseUrl' => $base_url,
  );
  drupal_add_js(
      array('swimServices' => $settings),
      'setting'
  );
  drupal_add_js( 
      drupal_get_path('module', 'swim') . '/js/swim_services.js' 
  );    
}

/**
 * Unflatten plugins array, if needed.
 * @param array $plugins Original array.
 * @return array Unflattened array.
 */
function _swim_unflatten ( $plugins ) {
  if ( ! isset( $plugins['name'] ) ) {
    return $plugins;
  }
  if ( is_array($plugins['name']) ) {
    return $plugins;
  }
  $new_array = array(
    'name' => array( $plugins['name'] ),
    'path' => array( $plugins['path'] ),
  );
  return $new_array;
}

/**
 * Implements hook_field_info().
 */
function swim_field_info() {
  return array(
    'swim_field' => array(
      'label' => t('SWIM'),
      'description' => t('Show What I Mean.'),
      'default_widget' => 'swim_widget',
      'default_formatter' => 'swim_default_formatter',
    ),
    'swim_with_summary_field' => array(
      'label' => t('SWIM with summary'),
      'description' => t('Show What I Mean.'),
      'default_widget' => 'swim_with_summary_widget',
      'default_formatter' => 'swim_default_formatter',
    ),
  );
 } 

/**
 * Implements hook_field_formatter_info().
 * 
 * Defines formatters for SWIM and SWIM with summary. They have the same
 * ones as text.module's long text and long text summary.
 */
function swim_field_formatter_info() {
  $info = array(
    //Default shows main, no summary.
    'swim_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('swim_field', 'swim_with_summary_field'),
    ),
    //Trimmed version of main, no summary.
    'swim_trimmed_formatter' => array(
      'label' => t('Trimmed'),
      'field types' => array('swim_field', 'swim_with_summary_field'),
      'settings' => array('trim_length' => 600),
    ),
    //Prefer summary, if not, use trimmed version of main.
    'swim_summary_or_trimmed_formatter' => array(
      'label' => t('Summary or trimmed'),
      'field types' => array('swim_field', 'swim_with_summary_field'),
      'settings' => array('trim_length' => 600),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 * 
 * Trimmed formats have a trim length.
 */
function swim_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if (   $display['type'] == 'swim_trimmed_formatter'
      || $display['type'] == 'swim_summary_or_trimmed_formatter'
     ) {
    $element['trim_length'] = array(
      '#title' => t('Trim length'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['trim_length'],
      '#element_validate' => array('element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 * 
 * Return a short summary of a formatter's settings.
 */
function swim_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if (   $display['type'] == 'swim_trimmed_formatter'
      || $display['type'] == 'swim_summary_or_trimmed_formatter'
     ) {
    $summary = t('Trim length') . ': ' . $settings['trim_length'];
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 * 
 * Compute formatter output.
 */
function swim_field_formatter_view(
    $obj_type, $object, $field, $instance, 
    $langcode, $items, $display
  ) {
  //MathJax
  drupal_add_js('https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML');
  drupal_add_js( drupal_get_path('module', 'swim') . '/js/swim_mathjax_config.js' );
  //Styles
  drupal_add_css( drupal_get_path('module', 'swim') . '/css/swim.css' );
  $element = array();
  switch ($display['type']) {
    case 'swim_default_formatter':
    case 'swim_trimmed_formatter':
      foreach ($items as $delta => $item) {
        $content = $item['value'];
        //Convert from Textile to HTML
        $output = swim_textile2html( $content );
//        $output = swim_rest2html( $tokenized );
        if ($display['type'] == 'swim_trimmed_formatter') {
          $output = text_summary($output, NULL, $display['settings']['trim_length']);
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'swim_summary_or_trimmed_formatter':
      foreach ($items as $delta => $item) {
        if (!empty($item['summary'])) {
          $output = swim_textile2html( $item['summary'] );
//          $output = swim_rest2html( $item['summary'] );
        }
        else {
          $output = text_summary($item['value']);
          $output = swim_textile2html( $output );
//          $output = swim_rest2html( $output );
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;

  } //end switch
  
  return $element;
}

/**
 * Remove <br>s from $content.
 * Replace with nothing. CK sends us \ns after each <br>
 * @param type $content Content to remove <br>s from.
 */
function _swim_remove_brs( $content ) {
  $result = preg_replace('/\<\s*br\s*\/?\s*\>/i', '', $content);
  return $result;
}

/**
 * Replace img tags with just the src attribute.
 * @param string $content The content.
 */
function _swim_img_2_path( $content ) {
  //Pattern to find the img tags. Need the ? to make the match lazy, not greedy.
  $pattern = '/\<img.*?src=[\'|"](.*?)[\'|"].*?\/?\>/is';
  $content = preg_replace_callback(
      $pattern, 
      function ($matches) {
        //Got an image tag.
        //Parse it with the src.
        $src = $matches[1];
        return $src;
      },
      $content
  );
  return $content;
}

/**
 * Return rendered HTML for preview.
 */
function _swim_client_peek( $data ) {
  global $base_url;
  //Get markup.
  if ( !isset($data['markup']) ) {
    $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
        . ' markup missing.';
    drupal_set_message( $message );
    watchdog('SWIM', $message);
    return;
  }
  $markup = $data['markup'];
  //Convert content to pure ReST.
  $content = swim_ckhtml2textile($markup);
//  $content = _swim_ckhtml2rest($markup);
  //Replace tokens.
  $content = token_replace($content);
  //Convert the ReST content to HTML.
  $html = swim_textile2html($content);
//  $html = swim_rest2html($content);
  $module_path = $base_url . base_path() 
          . drupal_get_path('module', 'swim') . '/';
  //Let other modules add their own stuff.
  $css_files = module_invoke_all('swim_peek_load_css');
  //Add SWIM's CSS files.
  $css_files[] = $module_path . 'css/swim.css';
  $css_files[] = $module_path . 'content_only/content_only.css';
  
  $themed = theme(
    'content_only', 
    array(
      'title' => 'Peek',
      'stylesheets' => $css_files,
      'javascript_files' => array(
         'https://cdn.mathjax.org/mathjax/latest/MathJax.js'
            . '?config=TeX-AMS-MML_HTMLorMML',
         base_path() . drupal_get_path('module', 'swim') . '/js/swim_mathjax_config.js',
      ),
      'content' => $html,
    )
  );
  //Return rendered content. 
  return $themed;
}

/**
 * Check if use has 'peek content' access. Other modules
 * can implement a hook to give access.
 * @return boolean Yea or nay.
 */
function _swim_check_peek_perm() {
  if ( user_access( 'peek content' ) ) {
    return TRUE;
  }
  //Check if other modules want to grant access.
  $results = module_invoke_all('swim_peek_access');
  $access_granted = FALSE;
  foreach( $results as $result ) {
    if ( $result ) {
      $access_granted = TRUE;
      break;
    }
  }
  return $access_granted;
}

/**
 * Implements hook_theme().
 */
function swim_theme() {
  global $base_url;
  $info = array(
    'obscurer' => array(
      'template' => 'obscurer',
      'variables' => array(
        'obscurer_throbber_path' =>
          $base_url . '/' . drupal_get_path('module', 'swim') . '/',
      ),
    ),
    'swim_format_error' => array(
      'variables' => array(
        'message' => NULL,
      ),
    ),
    'content_only' => array(
      'template' => 'content_only/content_only',
      'variables' => array(
        'stylesheets' => NULL,
        'javascript_files' => NULL,
        'title' => NULL,
        'content' => NULL,
      ),
    ),
  );
  return $info;
}

/**
 * Theme a format error message from Docutils.
 */
function theme_swim_format_error( $variables ) {
  $message = $variables['message'];
  $html = "Problems in translating your ReST.<br><br>" . $message
        . "<br>ReST can be tricky. Check the CyberCourse wiki for help.";
  return $html;
}

/**
* Implements hook_services_resources().
*/
function swim_services_resources() {
  $api = array(
    /** ReST help **/
    'swim_help' => _swim_def_help_services(),
    /** Peek **/
    'peek' => _swim_def_peek_services(),
  );
  return $api;
}

/**
 * Define ReST help API.
 * @return array API definition.
 */
function _swim_def_help_services() {
  $api = array(
      'actions' => array(
        'swimHelp' => array(
          'help' => t('Returns a help message about ReST.'),
          'access arguments' => array('access content'),
          'callback' => '_swim_client_help',
        ),
      ),
    ); //End rubric_item_categories
  return $api;
}

/**
 * Define peek API.
 * @return array API definition.
 */
function _swim_def_peek_services() {
  $api = array(
    'actions' => array(
      'peek' => array(
        'help' => t('Return rendered content for peek window.'),
        'access arguments' => array('access content'),
        'callback' => '_swim_client_peek',
        'args' => array(
          array(
           'name' => 'data',
           'type' => 'struct',
           'description' => 'Markup to render.',
           'source' => 'data',
           'optional' => FALSE,
          ),
        ), //End args.
      ), //End peek.
    ), //End actions.
  ); //End rubric_item_categories
  return $api;
}

/**
 * Send ReST help message.
 * @return string Help message.
 */
function _swim_client_help() {
  global $base_url;
  $help = variable_get('swim_help_message_rendered', 'Sorry, no help available.');
  $themed_help = theme(
    'content_only', 
    array(
      'title' => 'SWIM Help',
      'stylesheets' => array(
        $base_url . base_path() 
          . drupal_get_path('module', 'swim') . '/content_only/content_only.css',
      ),
      'content' => $help,
    )
  );
  return $themed_help;
}

/**
 * Convert content from CKHTML (HTML from CK field) to pure Textile.
 * Anything the user typed must by HTML encoded, e.g., if the user typed
 * <, then &lt; should be in the content.
 * HTML that CK inserted should be as regular tags.
 * @param string $content Content to convert.
 */
function swim_ckhtml2textile( $content ) {
  //Convert to pure Textile.
  //Replace &nbsp; with real spaces.
  $content = str_replace('&nbsp;', ' ', $content);
  //Replace &#39; with real quotes.
  $content = str_replace('&#39;', '\'', $content);
  //Change markup form Mathjax CK plugin to Textile.
//  $content = _swim_ck_mathjx2textile( $content );
  //Remove the <br>s, leaving just the \ns.
  $content = _swim_remove_brs( $content );
  
  //Trigger other module's translators. 
  drupal_alter( 'swim_ckhtml2textile', $content); 
  //Replace image HTML tags with MD tags.
  //  These must be after other module's hooks are called, so that other 
  //  modules have processes the images they own.
  $content = _swim_img_2_path( $content );
  //Add tags that MathJax needs.
  $content = _swim_ckhtml2textile_math($content);
  //HTML entities to their real characters.
  $content = html_entity_decode( $content, ENT_QUOTES, 'UTF-8' );
  //Special chars - particularly #39; -> '.
  $content = htmlspecialchars_decode( $content );
  return $content;
}

/**
 * Translate Textile into HTML for viewing.
 * @param string $textile Textile
 * @return string HTML
 */
function swim_textile2html( $textile ) {
  //Replace tokens.
  $textile = token_replace($textile);
  $textile = str_replace("\r", '', $textile);
  //Custom tags.
  $p = new SwimCustomTagParser();
  //Tell other modules to declare their tags for viewing.
  swim_declare_custom_tags( $p, 'view' ) ;
  $out = $p->parse($textile);
  //Load Textile library.
  $textile_library_info = libraries_load('php-textile');
  $num_files_loaded = libraries_load_files($textile_library_info);
  if ( $num_files_loaded <= 0 ) {
    $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
        . 'SWIM error: no Textile files loaded. Is PHP-Textile installed?';
    cyco_core_handle_error( $message );
    return;
  }
  //Translate textile.
  $parser = new \Netcarver\Textile\Parser();
  $html = $parser
      ->setDocumentType('html5')
      ->setLineWrap(FALSE)
      ->parse($out);
  //Wrap math formula in span MathJax uses. Same as CK plugin uses.
  $html = _swim_textile2ckhtml_math( $html );
  //Put everything in a SWIM wrapper.
  $html = '<div class="swim textile">' . $html . '</div>';
  return $html;
}

/**
 * Prepare some Textile for editing in CK.
 */
function swim_textile2ckhtml( $content ) {
  //Remove \rs. They are evil.
  $content = str_replace("\r", '', $content);
  //Convert math directives to HTML wrappers that CK Mathjax plugin needs.
  //Doesn't insert HTML tags directly, since they would be messed up
  //by the other translation code below. Instead, inserts temp markers that
  //are replaced by HTML after other translation is done.
  //Make sure there is a \n at the end.
  $last_char = substr($content, strlen( $content ) - 1, 1);
  if ( $last_char != "\n" ) {
    $content .= "\n";
  }
//  list( $content, $math_replacements ) = _swim_rest2betwixt_mathjx($content);
//  list( $content, $image_replacements ) = _swim_rest2betwixt_images($content);
  //Trigger other module's translators.
//  drupal_alter( 'swim_textile2betwixt', $content);
  //Encode everything the user typed.
  $content = htmlspecialchars( $content );
  //Grab image paths and wrap them in <img> tags.
  $content = _swim_textile2ckhtml_images($content);
  //Wrap MathJax class around math stuff.
  $content = _swim_textile2ckhtml_math($content);
  //Custom tags.
  $p = new SwimCustomTagParser();
  //Tell other modules to declare their tags for editing.
  swim_declare_custom_tags( $p, 'edit' ) ;
  $content = $p->parse($content);
  //Trigger other module's translators. 
//  drupal_alter( 'swim_textile2ckhtml', $content);
  $content = str_replace("\n", "<br>", $content);
  //Replace two spaces with &nbsp; and a space.
  //Otherwise, CK collapses multiple spaces.
  $content = str_replace('  ', '&nbsp; ', $content);
  //Replace math temp markers with HTML tags used by MathJax.
//  $content = _swim_betwixt2ckhtml_mathjx( $content, $math_replacements );
  //Replace image temp markers with HTML tags.
//  $content = _swim_betwixt2ckhtml_images( $content, $image_replacements );
  return $content;
}

/**
 * Grab paths in  image tags, and wrap them in <img>.
 * @param string $content Content with raw Textile image tags.
 * @return string Content with wrapped tags.
 */
function _swim_textile2ckhtml_images( $content ) {
  //This regex of Doom comes from php-textile. I don't know how it works.
  $opt_attrs = "(?:(?:\([^)
  ]+\))(?:(?:\[[^]
  ]+\])(?:(?:\{[^}
  ]+\}))?|(?:\{[^}
  ]+\})(?:(?:\[[^]
  ]+\]))?)?|(?:\[[^]
  ]+\])(?:(?:\([^)
  ]+\))(?:(?:\{[^}
  ]+\}))?|(?:\{[^}
  ]+\})(?:(?:\([^)
  ]+\)))?)?|(?:\{[^}
  ]+\})(?:(?:\([^)
  ]+\))(?:(?:\[[^]
  ]+\]))?|(?:\[[^]
  ]+\])(?:(?:\([^)
  ]+\)))?)?)?";

  $regex='/
              (?:[[{])?                       # pre
              \!                              # opening !
              (?P<align>\<|\=|\>|&lt;|&gt;)?  # optional alignment              $algn
              (?P<atts>'.$opt_attrs.')        # optional style,class atts       $atts
              (?:\.\s)?                       # optional dot-space
              (?P<url>[^\s(!]+)               # presume this is the src         $url
              \s?                             # optional space
              (?:\((?P<title>[^\)]+)\))?      # optional title                  $title
              \!                              # closing
              (?::(?P<href>\S+)(?<![\]).,]))? # optional href sans final punct. $href
              (?:[\]}]|(?=[.,\s)|]|$))        # lookahead: space,.)| or end of string ("|" needed if image in table cell)
              /x'.'u';  
  $matches = array();
  preg_match_all($regex, $content, $matches);
  if ( isset( $matches['url'] ) ) {
    //Remove duplicates, otherwise the replacement breaks.
    $urls = array_unique($matches['url']);
    foreach( $urls as $url ) {
      $tag = '<img src="' . $url . '">';
      $content = str_replace(
          $url, //Find this
          $tag, //Replace it with this.
          $content //In this
      );
    }
  }
  return $content;
}

/**
 * Wrap TeX in classes that MathJax looks at.
 * @param string $content Content with uwrapped tags.
 * @return string Content with wrapped tags.
 */
function _swim_textile2ckhtml_math( $content ) {
  //Match ![stuff](path  - not including the end of the tag.
  //This allows for titles to be there or not.
  //Backticks end up being removed.
  $patterns = array(
    '/\\\\\(.*\\\\\)/',  //Inline
    '/\\\\\[.*\\\\\]/',  //Display
  );
  $matches = array();
  foreach( $patterns as $pattern ) {
    preg_match_all($pattern, $content, $matches);
    //$matches[0] are the complete matches, including the paths.
    //$matches[1] just has the paths.
    foreach( $matches[0] as $matched ) {
      //Needs the style and data-, else CK plugin won't recognize it as 
      //something that belongs to it. Why? Don't know. Suspect Satan's 
      //involvement.
      $replacement = 
          '<span class="' . SWIM_MATH_JAX_CLASS 
          . '" style="display:inline-block" data-cke-survive=1>' . $matched . '</span>';
      $content = str_replace(
          '`' . $matched . '`', //Find this
          $replacement, //Replace it with this.
          $content //In this
      );
    } //End match loop.
  } //End pattern loop.
  return $content;
}

/**
 * Convert content from CKHTML (HTML from CK field) to pure Textile.
 * Anything the user typed must by HTML encoded, e.g., if the user typed
 * <, then &lt; should be in the content.
 * HTML that CK inserted should be as regular tags.
 * @param string $content Content to convert.
 */
function _swim_ckhtml2textile( $content ) {
  //Convert to pure Textile.
  //Replace &nbsp; with real spaces.
  $content = str_replace('&nbsp;', ' ', $content);
  //Replace &#39; with real quotes.
  $content = str_replace('&#39;', '\'', $content);
  //Change markup form Mathjax CK plugin to Textile.
//  $content = _swim_ck_mathjx_2_rest( $content );
  //Remove the <br>s, leaving just the \ns.
  $content = _swim_remove_brs( $content );
  
  //Handle numeric codes correctly.
  // See http://www.php.net/manual/en/function.html-entity-decode.php#47371
//  $content = preg_replace('/&#(\d+);/me',"chr(\\1)",$content); #decimal notation
//  $content = preg_replace('/&#x([a-f0-9]+);/mei',"chr(0x\\1)",$content);  #hex notation
  //Trigger other module's translators. 
  drupal_alter( 'swim_ckhtml2textile', $content); //, $type );
  //Replace image HTML tags with directives.
  //  These must be after other module's hooks are called, so that other 
  //  modules have processes the images they own.
  $content = _swim_img_2_path( $content );
  //Strip all remaining HTML tags.
  //This gets rid of paste errors. I hope!
//  $content = strip_tags($content);
  //HTML entities to their real characters.
  $content = html_entity_decode( $content, ENT_QUOTES, 'UTF-8' );
  //Special chars - particularly #39; -> '.
  $content = htmlspecialchars_decode( $content );
  return $content;
}

/**
 * Remove span wrapper from MathJax things.
 * @param string $content Content with wrapped tags.
 * @return string Content with unwrapped tags.
 */
function _swim_ckhtml2textile_math( $content ) {
  $pattern = '/\<.*span.*class.*' . SWIM_MATH_JAX_CLASS . '.*\>(.*)?\<\/span\>/';
  $matches = array();
  preg_match_all($pattern, $content, $matches);
  //$matches[0] are the complete matches, including the equations.
  //$matches[1] just has the equations.
  foreach( $matches[0] as $key => $full_match ) {
    $eqn = '`' . $matches[1][ $key ] . '`';
    $content = str_replace(
        $full_match, //Find this
        $eqn, //Replace it with this.
        $content //In this
    );
  } //End match loop.
  return $content;
}