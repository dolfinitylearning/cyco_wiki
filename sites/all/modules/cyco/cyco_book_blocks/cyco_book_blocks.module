<?php

/**
 * Max number characters link text can be.
 */
define('CBB_MAX_CHARS', 50);

/**
 * Max number of recursion levels when generating tree menu..
 */
define('CBB_MAX_RECURSION_LEVELS', 20);

/**
 * Implements hook_menu_link_alter().
 * 
 * Clears book menu caches for book containing item.
 * Runs more often than it should. Runs when the content of a page changes, 
 * but its menu data has not.
 */
function cyco_book_blocks_menu_link_alter(&$item){
  if ( isset( $item['bid'] ) ) {
    $bid = $item['bid'];
    $book_root = node_load($bid);
    //Perm for whether the current user can see unpublished items.
    $book_type = $book_root->type;
    if ( cyco_core_is_book_content_type($book_type) ) {
      _cbb_clear_book_tree_menu_caches($bid);
    }
  }
}

/**
 * Clear caches of all book tree menus.
 */
function cyco_book_blocks_flush_all_tree_menu_caches() {
  //Get bids (nids of root nodes) for all relevant book types.
  $root_types = cyco_core_get_book_root_types();
  $all_bids = array();
  foreach ( $root_types as $root_type ) {
    $bids = _cbb_get_nids_book_roots( $root_type );
    $all_bids += $bids;
  }
  //Clear all caches.
  foreach ( $all_bids as $bid ) {
    _cbb_clear_book_tree_menu_caches( $bid );
  }
}

/**
 * Clear the tree menu caches for a book.
 * @param type $bid Book id (also nid of book root node)
 */
function _cbb_clear_book_tree_menu_caches( $bid ) {
  $see_unpublished = TRUE;
  $cache_name = _ccbb_compute_cache_name($bid, $see_unpublished );
  variable_del($cache_name);
  $see_unpublished = FALSE;
  $cache_name = _ccbb_compute_cache_name($bid, $see_unpublished );
  variable_del($cache_name);
}

function cyco_book_blocks_permission() {
  return array(
    'view unpublished cyco course content' => array(
      'title' => t('View unpublished course content'),
      'description' => t('User can see course content that has not been published.'),
    ),
    'view unpublished cyco blueprint content' => array(
      'title' => t('View unpublished blueprint content'),
      'description' => t('User can see blueprint content that has not been published.'),
    ),
  );
}


/**
 * Implements hook_block_info().
 */
function cyco_book_blocks_block_info() {
  $blocks = _cbb_block_info_for_type('course_page', 'Course');
  $blocks += _cbb_block_info_for_type('blueprint_page', 'Blueprint');
  //Get course roots.
  return $blocks;  
}

/**
 * Create block info array for book roots of a given content type.
 * @param string $content_type Content type, e.g., course_page.
 * @param string $type_label Label in block admin name, e.g., Course.
 * @return array Block info array.
 */
function _cbb_block_info_for_type( $content_type, $type_label ) {
  //Get the nids of book roots.
  $nids = _cbb_get_nids_book_roots( $content_type );
  $block_info = array();
  foreach( $nids as $nid ) {
    $node = node_load($nid);
    //Delta of block is cbb_ . nid, used in block_view().
    $block_info[ 'cbb_' . $nid ] = array(
      'info' => $type_label . ': ' . $node->title,
      'cache' => DRUPAL_CACHE_CUSTOM,
    );
  }
  return $block_info;
}

/**
 * Implements hook_block_view().
 */
function cyco_book_blocks_block_view($delta = '') {
  //Is this a block for this module?
  $pos = strpos($delta, 'cbb_');
  if ( $pos === FALSE ) {
    return;
  }
  $root_nid = substr($delta, 4); //4 is len of _cbb
  if ( !is_numeric($root_nid) ) {
    return;
  }
  //$root_nid is the nid of the book's root.
  $block = array();
  $block['subject'] = '';
  $block['content'] = _cbb_create_block_content( $root_nid );
  return $block;
}

/**
 * Create content for a book block.
 * @param int $root_nid Nid of the root node.
 * @global stdClass $user You know what it is.
 * @return string Content representing the block.
 */
function _cbb_create_block_content( $root_nid ) {
  if ( is_nan($root_nid) ) {
      $message = __FILE__ . ' (line ' . __LINE__ . ') ' . __FUNCTION__ 
          . ' Not numeric : ' . $root_nid;
      cyco_utilities_handle_error( $message );
      return FALSE;
  }
  $output = '';
  $rendered_tree = _cbb_get_book_tree( $root_nid );
  return $rendered_tree;
}

/**
 * Find the nids for book roots of a given bundle.
 * @param string $bundle_name The name of the bundle.
 * @return array The nids.
 */
function _cbb_get_nids_book_roots( $bundle_name ) {
  $result = array();
  $sql = 
    "SELECT DISTINCT 
         b.bid AS book_root_nid
       FROM {book} AS b
       INNER JOIN {node} ON b.bid = node.nid
       WHERE node.type = :bundle";
    $query_result = db_query($sql, array( ':bundle' => $bundle_name ) );
    foreach ( $query_result as $record ) {
      $result[] = $record->book_root_nid;
    }
  return $result;
}

/**
 * Make a message to show when there are no books.
 * @param string $book_type_label_plural Book type, e.g., dolfins.
 * @return string Message.
 */
//function _cbb_make_empty_message( $book_type_label_plural ) {
//  $message = '<p>' . t('No ') . t($book_type_label_plural) . '.</p>';
//  $make_message = 
//      '<p>' .
//      t('Administrators can create @type in the control panel.', 
//          array('@type' => $book_type_label_plural)
//      ) . 
//      '</p>';
//  return $message . $make_message;
//}

/**
 * Make a tree for a node
 * @param int $root_nid Nid.
 * @return string Content.
 */
function _cbb_get_book_tree( $root_nid ) {
  //Send path of current page. Client code will highlight the path to that page.
  $current_path = request_path();
  if ( drupal_substr($current_path, -4) == 'edit' ) {
    //On the edit page. Still want to highlight it in the menu.
    //So make the current path the path to the view page.
    $current_path = drupal_substr($current_path, 0, -5);
    $current_path = drupal_get_path_alias( $current_path );
  }
  global $base_url;
  $settings = array(
    'current_path' => $current_path,
    'base_url' => $base_url,
  );
  drupal_add_js(
      array('cyco_book_blocks' => $settings),
      'setting'
  );
  $root_node = node_load($root_nid);
  //Perm for whether the current user can see unpublished items.
  $book_type = $root_node->type;     
  $perm_to_check = "view unpublished cyco $book_type content";
  $see_unpublished = user_access($perm_to_check);
  //Use cached menu?
  $cache_name = _ccbb_compute_cache_name($root_nid, $see_unpublished );
  $cache = variable_get($cache_name, NULL);
  if ( ! is_null($cache) ) {
    return $cache;
  }
  //Regenerate the menu.
  $current_recusion_level = 0;
  $tree = array();
  $title_to_use = _cbb_get_node_title( $root_node );
  $tree[$title_to_use] = _cyco_book_blocks_make_tree(
      $root_node->book['mlid'],
      $root_node->nid,
      $root_node->title,
      $root_node->status,
      $current_recusion_level
  );
  $trail = array ( current_path() );
  global $_cbb_root_path;
  $_cbb_root_path = 'node/' . $root_nid;
  //Render, with unpublished nodes.
  $rendered = theme(
      'cbb_book_tree', 
      array(
        'root_title' => t( $title_to_use ),
        'root_nid' => $root_nid,
        'tree' => $tree, 
        'trail' => $trail,
        'include_unpublished' => $see_unpublished,
      )
  );
  variable_set( $cache_name, $rendered);
  return $rendered;
}

/**
 * Compute the name of the cache to use.
 * @param string $book_type Course or blueprint.
 * @param boolean $see_unpublished True if current user can see unpublished pages.
 */
function _ccbb_compute_cache_name( $nid, $see_unpublished ) {
  if ( $see_unpublished ) {
    $name = '_cbb_menu_cache_w_unpublished' . $nid;
  }
  else {
    $name = '_cbb_menu_cache_wo_unpublished' . $nid;
  }
  return $name;
}

/**
 * Return short title if set, else title.
 * @param stdClass $node Node.
 * @return string Title to use.
 */
function _cbb_get_node_title( $node ) {
  if ( isset( $node->field_short_title[LANGUAGE_NONE][0]['value'] ) ) {
    return $node->field_short_title[LANGUAGE_NONE][0]['value'];
  }
  return $node->title;
}

/**
 * Implements hook_theme().
 * Tells Drupal about custom theme functions.
 */
function cyco_book_blocks_theme() {
  return array(
    
    'cbb_book_tree' => array(
      'variables' => array(
        'tree' => NULL,
        'trail' => NULL,
      ),
    ),
    
    'cbb_listitem' => array(
      'variables' => array(
        'item' => NULL,
        'link_text' => NULL,
        'path' => NULL,
        'options' => NULL,
        'state' => NULL,
        'classes' => NULL,
        'has_children' => NULL,
        'nextlevel' => NULL,
      ),
    ),

    'cbb_links' => array(
      'variables' => array(
        'link_text' => NULL,
        'path' => NULL,
        'options' => NULL,
        'state' => NULL,
        'classes' => NULL,
        'has_children' => NULL,
      ),
    ),
  );
}

function _cyco_book_blocks_make_tree( $mlid, $nid, $title, $published,
  $current_recusion_level ) {
  $this_level = array(); 
  $sql= "SELECT DISTINCT n.nid as nid, m.plid as plid, m.mlid as mlid,  
            n.title as title, st.field_short_title_value as short_title, 
            n.status as status
         FROM {book} as b
         inner join {menu_links} as m ON b.mlid = m.mlid
         inner join {node} as n ON n.nid = b.nid
         left join {field_data_field_short_title} as st ON st.entity_id = n.nid
         WHERE m.plid = :mlid
         ORDER by m.weight, n.title
         ";
  //ATTENTION --- DB_REWRITE MISSING --- 
  $query_result = db_query($sql, array(':mlid'=>$mlid) );
  //Output the current link.
  $this_level['link'] = array(
    'path' => 'node/' . $nid,
    'link_text' => $title,
    'has_children' => 0, //Code below might change this.
    'published' => $published,
    'options' => array(
      'attributes' => array(
        'title' => $title,
      ),
    ),
  );
  $current_recusion_level++;
  if ( $current_recusion_level < CBB_MAX_RECURSION_LEVELS ){
    $children = array();
    foreach ( $query_result as $child ) {
      $title_to_use = $child->short_title 
          ? $child->short_title
          : $child->title;
      $children[$title_to_use] = _cyco_book_blocks_make_tree($child->mlid,
          $child->nid, $title_to_use, $child->status,
          $current_recusion_level );
    }
    if ( sizeof($children) > 0 ) {
      $this_level['link']['has_children'] = 1;
      $this_level['below'] = $children;
    }
  }
  return $this_level;
}

function theme_cbb_book_tree($variables) {
  //Block title has already been t'd in _cbb_get_book_tree.
  $block_title = $variables['root_title'];
  $root_nid = $variables['root_nid'];
  $root_url = base_path() . 'node/' . $root_nid;
  $tree = $variables['tree'];
  $trail = $variables['trail'];
  $include_unpublished = $variables['include_unpublished'];
  $menu_output = cbb_recursive_link_creator($trail, $include_unpublished, $tree);
  if (!empty($menu_output)) {
    $output 
        =   '<div class="cyco-book-tree-title">'
          .   '<a href="' . $root_url . '">' . t($block_title) . '</a>'
          . '</div>';
    $output .= '<ul class="cyco-book-tree-menu menu-top">';
    $output .= $menu_output;
    $output .= '</ul>';
    return $output;
  }
}

function cbb_recursive_link_creator(
    $trail,
    $include_unpublished,
    $items = array(), 
    $parentid = ''
) {
  static $menucount = 0;
  $count = 0;
  $output = '';
  $nextlevel = '';
  if ( $parentid == '' ) {
    $menucount ++;
    $parentid = $menucount;
  }
  $url_array = $trail;

  if ( ! empty($items) ) {
    foreach ( $items as $item ) {
      //Skip processing for a nonauthor trying to see an 
      //  unpublished page.
      if (    isset( $item['link'] ) 
           && ( 
                  $item['link']['published'] 
               || $include_unpublished
              )
         ) {
        $count++;
        $id = $parentid . '-' . $count;
        $classes = array();
        //All closed to begin with.
        $state = 'closed';
        //Action is to open.
        $classes[] = 'open-branch';
        // If there are submenu items we assign the parent a class.
        if ( ! empty($item['below'])  ) {
          $nextlevel = '';
          $nextlevel = cbb_recursive_link_creator(
              $id, $include_unpublished, $item['below'], $url_array
          );
          if (!empty($nextlevel)) {
            $classes[] = 'parent_li';
          }
        }
        if ($count == 1) {
          $classes[] = 'first';
        }
        if ($count == count($items)) {
          $classes[] = 'last';
        }
        $options = array();
        if (isset($item['link']['options'])) {
          $options = $item['link']['options'];
        }
        $output .= theme('cbb_listitem', array(
          'item' => $item,
          'id' => $id,
          'link_text' => $item['link']['link_text'],
          'path' => $item['link']['path'],
          'options' => $options,
          'state' => $state,
          'classes' => $classes,
          'has_children' => $item['link']['has_children'],
          'published' => $item['link']['published'],
          'nextlevel' => $nextlevel,
        ));
      } //End author or published page.
    } //End for.
  } //End not MT items.
  return $output;
}

/**
 * Render a list item containing one or more links.
 */
function theme_cbb_listitem($variables) {
  $item         = $variables['item'];
  $id           = $variables['id'];
  $link_text    = $variables['link_text'];
  $path         = $variables['path'];
  $options      = $variables['options'];
  $state        = $variables['state'];
  $classes      = $variables['classes'];
  $nextlevel    = $variables['nextlevel'];
  $has_children = $variables['has_children'];
  $published    = $variables['published'];
  
  if (!isset($output)) {
    $output = '';
  }
  
  //Everything hidden initially, except the root.
  $output .= '<li ' //id="' . $id . '" ' 
      . (empty($classes) ? '>' : ' class="' . implode(' ', $classes) 
      . '" ');
  global $_cbb_root_path;
  if ( $path != $_cbb_root_path ) {
    $output .= ' style="display:none;" ';
  }
  $output .= '>';

  $output .= theme('cbb_links', array(
    'link_text' => $item['link']['link_text'], //KRM ?? $link_text?
    'path' => $path,
    'options' => $options,
    'state' => $state,
    'classes' => $classes,
    'has_children' => $has_children, //$item['link']['has_children'],
    'published' => $published,
  ));

  if (!empty($item['link']['has_children'])) {
    if (!empty($nextlevel)) {
      $output .= '<ul>';
      // If the link has children call the function on itself.
      $output .= $nextlevel;
      $output .= '</ul>';
    }
  }

  $output .= '</li>';
  return $output;
}

/**
 * Render a single link, possibly with open/close link and/or edit button.
 */
function theme_cbb_links($variables) {
  // create values from the parameter array
  $link_text    = $variables["link_text"];
  $path         = $variables["path"];
  $options      = $variables["options"];
  $state        = $variables["state"];
  $classes      = $variables["classes"];
  $has_children = $variables["has_children"];
  $published    = $variables['published'];
  
  //Add published status as attribute for unpublished items.
  if ( $published == 0 ) {
    $options['attributes']['data-published'] = 'no';
  }
  $icon_class = '';
  $title_attr = '';
  //Choose one of three icon classes.
  if ( ! $has_children ) {
    $icon_class = 'no-branch';
  }
  else {
    $icon_class = 'open-branch';
  }
  $output = '<span ' . $title_attr . ' class="' . $icon_class . '">&nbsp;</span> ';
  //Add the unpublished marker if needed.
  $link_text = ( $published == 0 )
        ? '(u) ' . $link_text 
        : $link_text;
  //Enforce maximum length of title.
  $link_text = _cbb_max_len($link_text);
  $link = l(
      $link_text, 
      $path, 
      $options
  );
  $output .= $link;
  return $output;
}

/**
 * Limit a string to a length. Add elipsis if too long.
 * @param string $string String to limit.
 * @return string Limited string
 */
function _cbb_max_len($string) {
  if ( strlen($string) > ( CBB_MAX_CHARS - 3 ) ) {
    $string = drupal_substr($string, 0, CBB_MAX_CHARS - 3) . '...';
  }
  return $string;
}

function cyco_book_blocks_node_update($node) {
  _ccbb_maybe_erase_menu_cache( $node );
}


function cyco_book_blocks_node_insert($node) {
  _ccbb_maybe_erase_menu_cache( $node );
}


function cyco_book_blocks_node_delete($node) {
  _ccbb_maybe_erase_menu_cache( $node );
}

/**
 * Erase the cache for book menu a node is in.
 */
function _ccbb_maybe_erase_menu_cache( $node ) {
  if ( isset($node->book) ) {
    if ( cyco_core_is_book_content_type( $node ) ) {
      $bid = $node->book['bid'];
      variable_del(_ccbb_compute_cache_name($bid, TRUE) );
      variable_del(_ccbb_compute_cache_name($bid, FALSE) );    
    }
  }
}

